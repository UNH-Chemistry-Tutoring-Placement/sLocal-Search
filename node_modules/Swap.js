module.exports = Swap;

var grader = require('Grade'),
    rand = require('randomAssignment'),
    printOut = require('FileData').out,
    data = require('FileData').get();

function Swap(){
	
    var results = [],
        timeStart = new Date().getTime(),
        timeUp = isNaN(Number(process.argv[2])) ? 1000 : Number(process.argv[2]) * 1000;
    
    while((new Date().getTime() - timeStart) < timeUp){
        var curAssignment;
        
        // are we improving an existing solution?
        if(process.argv[4] == "improve")
            curAssignment = data.assignment;
        
        else // no, so create a random one
            curAssignment = rand();
        
        //console.log("beginning at ", grader.gradeTotal(curAssignment));
        
        // the swapping will begin!
        SingleSwap(curAssignment);
        
        // if we double swap at all, we're going to single swap again.
        var weDoubleSwapped = DoubleSwap(curAssignment);
        
        while(weDoubleSwapped){
            
            var weSingleSwapped = SingleSwap(curAssignment);
            if (weSingleSwapped) console.log("we single swapped");
            
            if (weSingleSwapped){
                weDoubleSwapped = DoubleSwap(curAssignment);
                if (weDoubleSwapped) console.log("we double swapped");
            }
        }
        
        //save the grade of this solution
        var grade = grader.gradeTotal(curAssignment);
        if (typeof results[grade] === 'undefined')
            results[grade] = curAssignment;

        //console.log("Ended at ", grade);
        
    }

    
    for (var result in results){
        //best solution
        //console.log("the score was", result, results[result]);
        return { grade: +result, assignments: results[result] };
    }

}
    
function SingleSwap(curAssignment){
    //single swap until we go through and don't swap once
    do {
        var swapped = false;
        var swappedAtAll = false;

        for (var time in curAssignment){

            //grade this time before any changes
            var beforePenalty1 = grader.grade(time, curAssignment[time]);

            for (var student of curAssignment[time]){

                var afterPenalty1 = grader.gradeWithout(time, curAssignment[time], student);

                //difference
                var diff1 = beforePenalty1 - afterPenalty1;

                //go through the good and possible time
                var allTimes = data.student.students[student].goodTimes.concat(data.student.students[student].possibleTimes);

                for (var time2 of allTimes){

                    if (time2 === time) continue; //ignore same time slot

                    //if the student has a timeslot that isn't in the group slots
                    if (typeof curAssignment[time2] === 'undefined')
                        continue;

                    var beforePenalty2 = grader.grade(time2, curAssignment[time2]);
                    var afterPenalty2 = grader.gradeWith(time2, curAssignment[time2], student);
                    var diff2 = beforePenalty2 - afterPenalty2;

                    var totalDiff = diff2 + diff1;

                    if (totalDiff > 0){ // if greater than 0, it's adventagous to swap
                        swapped = true;
                        swappedAtAll = true;
                        curAssignment[time].splice(curAssignment[time].indexOf(student), 1);
                        curAssignment[time2].push(student);
                        break;
                    }
                }
            }
        }
    } while(swapped);
    
    return swappedAtAll;
}
    
function DoubleSwap(curAssignment){
    //double swap!!
    do {
        var swapped = false;
        var swappedAtAll = false;

        for (var time in curAssignment){

            for (var student of curAssignment[time]){

                //go through all other time slots
                for (var time2 in curAssignment){

                    //need this variable so we can break out of this second for loop when we swap
                    var studentAlreadySwapped = false;

                    //skip first time slot time
                    if (time === time2) continue;

                    //is time2 a good/possible time for the student?
                    if (data.student.students[student].goodTimes.indexOf(time2) > -1 ||
                        data.student.students[student].possibleTimes.indexOf(time2) > -1 ){

                        // lets see if this student can move to this time slot.
                        // are there any students in this time slot that can move back to the first one?

                        for (var student2 of curAssignment[time2]){

                            // try to swap if time1 is a good/possible time for this student2
                            if (data.student.students[student2].goodTimes.indexOf(time) > -1 ||
                                data.student.students[student2].possibleTimes.indexOf(time) > -1 ){

                                //lets see if it's a good idea to swap.
                                var gradeTime1Before = grader.grade(time, curAssignment[time]);
                                var gradeTime1After = grader.gradeSwap(time, curAssignment[time], student2, student);
                                var diff1 = gradeTime1Before - gradeTime1After;

                                var gradeTime2Before = grader.grade(time2, curAssignment[time2]);
                                var gradeTime2After = grader.gradeSwap(time2, curAssignment[time2], student, student2);
                                var diff2 = gradeTime2Before - gradeTime2After;

                                if (diff1 + diff2 > 0){

                                    // it's adventagous to make this swap

                                    var studIndex = curAssignment[time].indexOf(student);
                                    curAssignment[time].splice(studIndex, 1);

                                    //remove student 2 from time 2

                                    var stud2Index = curAssignment[time2].indexOf(student2);
                                    curAssignment[time2].splice(stud2Index, 1);

                                    //place student 2 in time 1
                                    curAssignment[time].splice(studIndex, 0 , student2);

                                    //place student 1 in time 2
                                    curAssignment[time2].splice(stud2Index, 0, student);

                                    swapped = true;
                                    swappedAtAll = true;
                                    studentAlreadySwapped = true;

                                }
                            }
                        }
                    }

                    //if we already swapped student1, stop looking for places to swap!
                    if (studentAlreadySwapped)
                        break;

                }
            }
        }
    } while(swapped);
    
    return swappedAtAll;
}




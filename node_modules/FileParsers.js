module.exports = {
    class: ClassParser,
    assignment: assignmentParser,
    student: StudentParser, 
    objective: ObjectiveParser
};

function ClassParser(p){	
	var data = {};

    data.description = p.getSecondPart();
	data.numberOfProfessors = p.getSecondPartAsNumber();
	data.professors = [];
	for (var i = 0; i < data.numberOfProfessors; i++){
		data.professors.push(p.getSecondPart());
	}
	data.numberOfGroups = p.getSecondPartAsNumber();
	data.groups = {};
    
	for (var i = 0; i < data.numberOfGroups; i++){
		var group = {
			name: p.getSecondPart(),
			email: p.getSecondPart(),
			time: p.getSecondPart()
		};
        
        data.groups[group.time] = group;
	}
	
	return data;
}

function assignmentParser(p){
    var data = {};
    
    p.getLine();
    p.getLine();
    p.getLine();
    
    var numStudents = p.getSecondPart();
    for(var i=0; i<numStudents;i++){
        var email = p.getLine();
        var time = p.getLine();
        p.getLine(); // ignore TA for now
        if(typeof data[time] === 'undefined')
            data[time] = [];

        data[time].push(email);
    }
    return data;
}

function StudentParser(p){
    var data = {};
    
    data.description = p.getSecondPart();
	data.numStudent = p.getSecondPartAsNumber();
	data.students = {};
	var index = 0;
    
	while(index< data.numStudent){
		var student = {};
		student.name = p.getSecondPart();
		student.email = p.getSecondPart();
		student.professor = p.getSecondPart();
		student.year = p.getSecondPartAsNumber();
		student.sex = p.getSecondPart();
		student.numGoodTimes = p.getSecondPartAsNumber();
		student.goodTimes = [];
		var j = 0;
		while(j<student.numGoodTimes){
			student.goodTimes.push(p.getLine());
			j++;
		}
		var k = 0;
		student.numPossibleTimes = p.getSecondPartAsNumber();
		student.possibleTimes = [];
		while(k<student.numPossibleTimes){
			student.possibleTimes.push(p.getLine());
			k++;
		}
		data.students[student.email] = student;
		index++;
	}
	
	return data;
}

function ObjectiveParser(p){
	
	var data = {};
	
    data.description = p.getSecondPart();
	data.groupSize = {};
	data.groupSize.min = p.getSecondPartAsNumber();
	data.groupSize.max = p.getSecondPartAsNumber();
	data.penalties = {};
	data.penalties.belowMin = p.getSecondPartAsNumber();
	data.penalties.aboveMax = p.getSecondPartAsNumber();
	data.penalties.possibleChoice = p.getSecondPartAsNumber();
    data.penalties.diffProfessor = p.getSecondPartAsNumber();
    data.penalties.genderSolo = p.getSecondPartAsNumber();
	
	return data;
}
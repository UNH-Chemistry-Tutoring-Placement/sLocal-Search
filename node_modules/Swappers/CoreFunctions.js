module.exports = {
    single: SingleSwap,
    double: DoubleSwap,
    both: SingleAndDoubleSwap
};

var grader = require('Grade'),
    data = require('FileData').get();
    
function SingleSwap(curAssignment){
    //single swap until we go through and don't swap once
    var zeroCounter = 0;
    do {
        var swapped = false;

        for (var time in curAssignment){

            for (var student of curAssignment[time]){
                //grade this time before any changes
                
                var beforePenalty1 = grader.grade(time, curAssignment[time]);
                var afterPenalty1 = grader.gradeWithout(time, curAssignment[time], student);

                //difference
                var diff1 = beforePenalty1 - afterPenalty1;

                //go through the good and possible time
                var _allTimes = data.student.students[student].goodTimes.concat(data.student.students[student].possibleTimes);
                var allTimes = [];
                for (var _time of _allTimes){
                    
                    if (typeof data.class.groupsByTime[_time] !== "undefined"){
                        for (var __group of data.class.groupsByTime[_time])
                        allTimes.push(__group.time + "," + __group.name);
                    }
                    
                }

                for (var time2 of allTimes){

                    if (time2 === time) continue; //ignore same time slot

                    //if the student has a timeslot that isn't in the group slots
                    if (typeof curAssignment[time2] === 'undefined')
                        continue;

                    var beforePenalty2 = grader.grade(time2, curAssignment[time2]);
                    var afterPenalty2 = grader.gradeWith(time2, curAssignment[time2], student);
                    var diff2 = beforePenalty2 - afterPenalty2;

                    var totalDiff = diff2 + diff1;

                    if (totalDiff >= 0){ // if greater than 0, it's adventagous to swap
                        
                        if (zeroCounter >= 200){
                            return;
                        } else if (totalDiff === 0) { 
                            //console.log("single zero", zeroCounter);
                            zeroCounter++;
                        }
                        
                        else zeroCounter = 0; //reset the zero counter
                        
                        swapped = true;  
                        
                        curAssignment[time].splice(curAssignment[time].indexOf(student), 1);
                        curAssignment[time2].push(student);
                    
                        //if (totalDiff > 0) console.log("Grade is getting better", grader.gradeTotal(curAssignment));
                        
                        break;
                    }
                }
            }
        }
    } while(swapped);
    
    return;
}
    
function DoubleSwap(curAssignment){
    //double swap!!
    var zeroCounter = 0;
    do {
        
        var swapped = false;

        for (var time in curAssignment){

            for (var student of curAssignment[time]){

                //go through all other time slots
                for (var time2 in curAssignment){

                    //need this variable so we can break out of this second for loop when we swap
                    var studentAlreadySwapped = false;

                    //skip first time slot time
                    if (time === time2) continue;

                    //is time2 a good/possible time for the student?
                    var _justTime2 = time2.split(/,/)[0];
                    if (data.student.students[student].goodTimes.indexOf(_justTime2) > -1 ||
                        data.student.students[student].possibleTimes.indexOf(_justTime2) > -1 ){

                        // lets see if this student can move to this time slot.
                        // are there any students in this time slot that can move back to the first one?

                        for (var student2 of curAssignment[time2]){

                            // try to swap if time1 is a good/possible time for this student2
                            
                            var _justTime1 = time.split(/,/)[0];
                            if (data.student.students[student2].goodTimes.indexOf(_justTime1) > -1 ||
                                data.student.students[student2].possibleTimes.indexOf(_justTime1) > -1 ){

                                //lets see if it's a good idea to swap.
                                var gradeTime1Before = grader.grade(time, curAssignment[time]);
                                var gradeTime1After = grader.gradeSwap(time, curAssignment[time], student2, student);
                                var diff1 = gradeTime1Before - gradeTime1After;

                                var gradeTime2Before = grader.grade(time2, curAssignment[time2]);
                                var gradeTime2After = grader.gradeSwap(time2, curAssignment[time2], student, student2);
                                var diff2 = gradeTime2Before - gradeTime2After;

                                if (diff1 + diff2 >= 0){

                                    // it's adventagous to make this swap
                                    var totalDiff = diff1 + diff2;
                                    
                                    if (totalDiff === 0) { 
                                        if (zeroCounter >= 1000){
                                            return;
                                        }
                                        else{
                                            zeroCounter++;
                                            //if (zeroCounter > 50 ) console.log("doble", zeroCounter);
                                        }
                                    }
                                    
                                    else zeroCounter = 0; // reset the counter
                                    
                                    var studIndex = curAssignment[time].indexOf(student);
                                    curAssignment[time].splice(studIndex, 1);

                                    //remove student 2 from time 2

                                    var stud2Index = curAssignment[time2].indexOf(student2);
                                    curAssignment[time2].splice(stud2Index, 1);

                                    //place student 2 in time 1
                                    curAssignment[time].splice(studIndex, 0 , student2);

                                    //place student 1 in time 2
                                    curAssignment[time2].splice(stud2Index, 0, student);

                                    swapped = true;
                                    studentAlreadySwapped = true;
                                    
                                    break; // STUPID BREAK STATEMENT
                                    
                                    
                                }
                            }
                        }
                    }

                    //if we already swapped student1, stop looking for places to swap!
                    if (studentAlreadySwapped)
                        break;

                }
            }
        }
    } while(swapped);
    
    return;
}

function SingleAndDoubleSwap(curAssignment){
    
    // the swapping will begin!
    SingleSwap(curAssignment);
    DoubleSwap(curAssignment);

    
    return {
        grade: grader.gradeTotal(curAssignment),
        assignments: curAssignment
    };
    
}


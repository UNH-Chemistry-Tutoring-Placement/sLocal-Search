module.exports = SWO;

var data = require('FileData').get(),
    grader = require('Grade');

var maxGroupSize;

//main SWO function, use Squeaky Wheel Optimization and returns best result
function SWO() {
    var results = []
    var students = data.student.students
    var actualPossibleTimes = []
    var groups = data.class.groups
    maxGroupSize = data.objective.groupSize.max
    var studentsArr = []
    for (var i in students) studentsArr.push(students[i])
    for (var i = 0; i<100; i++){
        var assignment = {}
        for (var groupTime in groups) {
            assignment[groupTime] = []
            actualPossibleTimes.push(groupTime)
        }
        for (var j in studentsArr) {
            var time = getTimeForStudent(studentsArr[j], actualPossibleTimes, assignment)
            assignment[time].push(studentsArr[j].email)
            studentsArr[j].assignment = time
            studentsArr[j].satisfaction = rateAssignment(studentsArr[j])
        }
        var screwed = studentWhoGotScrewed(studentsArr)
        var withScrewedRemoved = removeStudents(studentsArr, screwed)
        studentsArr = screwed.concat(withScrewedRemoved)
        assignment.grade = grader.gradeTotal(assignment)
        results.push(assignment)
    }
    results.sort(function(a,b){
        return a.grade - b.grade;
    })
    console.log(results.length)
    return results[0];
}

//get a time for the student, if any of the students goodtimes are available give the student that time otherwise
//try the possible times, and if none of those are available return a random time
function getTimeForStudent(student, possibleTimes, assignment){
    for(var i in student.goodTimes){
        for(var j in possibleTimes){
            if(student.goodTimes[i] == possibleTimes[j] && isOption(possibleTimes[i],assignment)) return possibleTimes[j]
        }
    }
    for(var i in student.possibleTimes){
        for(var j in possibleTimes){
            if(student.possibleTimes[i] == possibleTimes[j] && isOption(possibleTimes[i],assignment)) return possibleTimes [j]
        }
    }
    var time;
    var done = false;
    while(!done){
        time = possibleTimes[randNumber(0,possibleTimes.length)]
        if(isOption(time,assignment)){
            break;
        }
    }
    return time;
}

//rate the assignment for the student: 0 for goodtime, 1 for possible time, 2 for impssible time
function rateAssignment(student){
    if(student.goodTimes.indexOf(student.assignment) > -1) return 0;
    if(student.possibleTimes.indexOf(student.assignment) > -1) return 1;
    return 2;
}

//make sure assigning this time would satisfy the objective
function isOption(time, assignment){
    if(assignment[time].length < maxGroupSize) return true;
    return false;
}

//random number generator
function randNumber(min,max){
    return Math.floor(Math.random() * (max-min) + min);
}

//return array of five students with lowest rating
function studentWhoGotScrewed(students){
    var copyOfStudents = students.slice();
    copyOfStudents.sort(function(a,b){
        return b.satisfaction - a.satisfaction;
    })
    return copyOfStudents.slice(0,5)
}

//remove students in the toBeRemoved array from the students array and return the result
function removeStudents(students, toBeRemoved){
    var retArray = []
    for(var i in students){
        var wasthere = false;
        for(var j in toBeRemoved){
            if(students[i].email == toBeRemoved[j].email) wasthere=true;
        }
        if(!wasthere) retArray.push(students[i])
    }
    return retArray
}


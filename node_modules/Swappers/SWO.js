module.exports = SWO;

var data = require('FileData').get(),
    grader = require('Grade'),
    studentList = require('assignmentList'),
    yargs = require('Yargs');

var maxGroupSize;
var actualPossibleTimes;
var retRand = 0;
//main SWO function, use Squeaky Wheel Optimization and returns best result
function SWO() {
    var timeUp = yargs.time;
    var results = []
    var students = data.student.students
    actualPossibleTimes = []
    var groups = data.class.groups
    maxGroupSize = data.objective.groupSize.max
    var studentsArr = []
    if(typeof data.assignment == "undefined") {
        for (var i in students) studentsArr.push(students[i])
        studentsArr = randomize(studentsArr)
    }else{
        console.log("Using existing solution!")
        studentsArr = studentList()
    }
    var timeStart = new Date().getTime(),
        timeUp = yargs.time;
    while((new Date().getTime() - timeStart) < timeUp){
        var assignment = {}
        for (var groupTime in groups) {
            assignment[groupTime] = []
            actualPossibleTimes.push(groupTime)
        }
        for (var j in studentsArr) {
            var time = getTimeForStudent(studentsArr[j], actualPossibleTimes, assignment)
            assignment[time].push(studentsArr[j].email)
            studentsArr[j].assignment = time
            studentsArr[j].satisfaction = rateAssignment(studentsArr[j])
        }
        var screwed = studentWhoGotScrewed(studentsArr)
        var withScrewedRemoved = removeStudents(studentsArr, screwed)
        studentsArr = screwed.concat(withScrewedRemoved)
        assignment.grade = grader.gradeTotal(assignment)
        results.push(assignment)
    }
    results.sort(function(a,b){
        return a.grade - b.grade;
    })
    return results[0];
}

//get a time for the student, if any of the students goodtimes are available give the student that time otherwise
//try the possible times, and if none of those are available return a random time
function getTimeForStudent(student, possibleTimes, assignment){
    var goods = []
    var possibles = []
    for(i in student.goodTimes){
        for(t in actualPossibleTimes){
            if(stringStartsWith(actualPossibleTimes[t],student.goodTimes[i])){
                goods.push(actualPossibleTimes[t])
                if(isOption(actualPossibleTimes[t],assignment)) return actualPossibleTimes[t]
            }
        }
    }
    for(i in student.possibleTimes){
        for(t in actualPossibleTimes){
            if(stringStartsWith(actualPossibleTimes[t],student.possibleTimes[i])){
                if(isOption(actualPossibleTimes[t],assignment)) return actualPossibleTimes[t]
            }
        }
    }

    var options = goods.concat(possibles)

    if(options.length > 0){
        options.sort(function(a,b){
            return assignment[a].length - assignment[b].length
        })
        return options[0]
    }
    return possibleTimes[randNumber(0,possibleTimes.length)]

}

//rate the assignment for the student: 0 for goodtime, 1 for possible time, 2 for impssible time
function rateAssignment(student){
    for(i in student.goodTimes) if(stringStartsWith(student.assignment, student.goodTimes[i])) return 0
    for(i in student.possibleTimes) if(stringStartsWith(student.assignment, student.possibleTimes[i])) return 1
    return 2;
}

//make sure assigning this time would satisfy the objective
function isOption(time, assignment){
    if(assignment[time].length < maxGroupSize) return true;
    return false;
}

function isPossible(time){
    //if(actualPossibleTimes[time] != undefined) return true
    //return false
    for(t in actualPossibleTimes){
        if(stringStartsWith(actualPossibleTimes[t],time)) return true
    }
    return false
}

//random number generator
function randNumber(min,max){
    return Math.floor(Math.random() * (max-min) + min);
}

//return array of five students with lowest rating
function studentWhoGotScrewed(students){
    var copyOfStudents = students.slice();
    copyOfStudents.sort(function(a,b){
        return b.satisfaction - a.satisfaction;
    })
    //for(s in copyOfStudents) console.log(copyOfStudents[s].satisfaction)
    return copyOfStudents.slice(0,5)
}

//remove students in the toBeRemoved array from the students array and return the result
function removeStudents(students, toBeRemoved){
    var retArray = []
    for(var i in students){
        var wasthere = false;
        for(var j in toBeRemoved){
            if(students[i].email == toBeRemoved[j].email) wasthere=true;
        }
        if(!wasthere) retArray.push(students[i])
    }
    return retArray
}

function stringStartsWith (string, prefix) {
    return string.slice(0, prefix.length) == prefix;
}

function randomize(input) {
    var ret = []
    while (input.length > 0){
        var random = Math.floor(Math.random() * input.length)
        var currVal = input[random]
        ret.push(currVal)
        input.splice(random,1)
    }
    return ret;
}


